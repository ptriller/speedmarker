options {
  UNICODE_INPUT=true;
    ERROR_REPORTING = true;
    STATIC = false;
//    DEBUG_PARSER = true;
//    DEBUG_TOKEN_MANAGER = true;
}

/*
fragment
JavaLetter
	:	[a-zA-Z$_] // these are the "java letters" below 0xFF
	|	// covers all characters above 0xFF which are not a surrogate
		~[\u0000-\u00FF\uD800-\uDBFF]
		{Character.isJavaIdentifierStart(_input.LA(-1))}?
	|	// covers UTF-16 surrogate pairs encodings for U+10000 to U+10FFFF
		[\uD800-\uDBFF] [\uDC00-\uDFFF]
		{Character.isJavaIdentifierStart(Character.toCodePoint((char)_input.LA(-2), (char)_input.LA(-1)))}?
	;

fragment
JavaLetterOrDigit
	:	[a-zA-Z0-9$_] // these are the "java letters or digits" below 0xFF
	|	// covers all characters above 0xFF which are not a surrogate
		~[\u0000-\u00FF\uD800-\uDBFF]
		{Character.isJavaIdentifierPart(_input.LA(-1))}?
	|	// covers UTF-16 surrogate pairs encodings for U+10000 to U+10FFFF
		[\uD800-\uDBFF] [\uDC00-\uDFFF]
		{Character.isJavaIdentifierPart(Character.toCodePoint((char)_input.LA(-2), (char)_input.LA(-1)))}?
    ;

*/

PARSER_BEGIN(SpeedMarkerParserBase)
package de.soapwars.speedmarker;

import de.soapwars.speedmarker.ast.*;
import de.soapwars.speedmarker.ast.node.*;
import de.soapwars.speedmarker.ast.expression.*;
import de.soapwars.speedmarker.ast.builder.*;

/** Simple brace matcher. */
public class SpeedMarkerParserBase {

    protected NodeBuilderFactory builderFactory;

}

PARSER_END(SpeedMarkerParserBase)

TOKEN_MGR_DECLS : {

  private StateStack stack = new StateStack();

  private void pushState(int state) {
    stack.push(curLexState);
    SwitchTo(state);
  }
  private void popState() {
    SwitchTo(stack.pop());
  }

  private void dupState() {
    stack.push(curLexState);
  }
}


/* WHITESPACE EXTRA ?
"\u0020", "\u00A0", "\u1680", "\u180E", "\u2000",
                                                    "\u2001", "\u2002", "\u2003", "\u2004", "\u2005",
                                                    "\u2006", "\u2007", "\u2008", "\u2009", "\u200A",
                                                    "\u200B", "\u202F", "\u205F", "\u3000", "\uFEFF",
                                                    "\n", "\u000b", "\u000c", "\r", "\u0085",
                                                    "\u2028", "\u2029", */


<DEFAULT> TOKEN : {
  < EXPRESSION_START: "${"> { pushState(CEXPRESSION); } // DONE
| <TAG_NOPARSE: "<#noparse>"> : NOPARSE //DONE
| <TAG_COMMENT: "<#--"> : COMMENT //DONE
| <TAG_ASSIGN: "<#assign"> { pushState(EXPRESSION); } // DONE
| <TAG_ATTEMPT: "<#attempt"> { pushState(EXPRESSION); } // DONE
| <TAG_BREAK: "<#break"> { pushState(EXPRESSION); }
| <TAG_CASE: "<#case"> { pushState(EXPRESSION); }
| <TAG_COMPRESS: "<#compress"> { pushState(EXPRESSION); } // DONE
| <TAG_DEFAULT: "<#default"> { pushState(EXPRESSION); }
| <TAG_ELSE: "<#else"> { pushState(EXPRESSION); } // DONE
| <TAG_ELSEIF: "<#elseif"> { pushState(EXPRESSION); } // DONE
| <TAG_ESCAPE: "<#escape"> { pushState(EXPRESSION); } // DONE
| <TAG_FALLBACK: "<#fallback"> { pushState(EXPRESSION); }
| <TAG_FUNCTION: "<#function"> { pushState(EXPRESSION); } // DONE
| <TAG_FLUSH: "<#flush"> { pushState(EXPRESSION); }
| <TAG_FTL: "<#ftl"> { pushState(EXPRESSION); }
| <TAG_GLOBAL: "<#global"> { pushState(EXPRESSION); } // DONE
| <TAG_IF: "<#if"> { pushState(EXPRESSION); } // DONE
| <TAG_IMPORT: "<#import"> { pushState(EXPRESSION); } // DONE
| <TAG_INCLUDE: "<#include"> { pushState(EXPRESSION); } // DONE
| <TAG_ITEMS: "<#items"> { pushState(EXPRESSION); }
| <TAG_LIST: "<#list"> { pushState(EXPRESSION); }
| <TAG_LOCAL: "<#local"> { pushState(EXPRESSION); }
| <TAG_LT: "<#lt>"> // DONE
| <TAG_MACRO: "<#macro"> { pushState(EXPRESSION); }
| <TAG_NESTED: "<#nested"> { pushState(EXPRESSION); }
| <TAG_NOESCAPE: "<#noescape"> { pushState(EXPRESSION); }
| <TAG_NT: "<#nt>"> // DONE
| <TAG_RECOVER: "<#recover"> { pushState(EXPRESSION); } // DONE
| <TAG_RECURSE: "<#recurse"> { pushState(EXPRESSION); }
| <TAG_RETURN: "<#return"> { pushState(EXPRESSION); }
| <TAG_SEP: "<#sep"> { pushState(EXPRESSION); } // DONE
| <TAG_SETTING: "<#setting"> { pushState(EXPRESSION); }
| <TAG_STOP: "<#stop"> { pushState(EXPRESSION); }
| <TAG_SWITCH: "<#switch"> { pushState(EXPRESSION); }
| <TAG_RT: "<#rt>"> // DONE
| <TAG_T: "<#t>"> // DONE
| <TAG_VISIT: "<#visit"> { pushState(EXPRESSION); }
| <TAG_ILLEGAL: ("<#" ~[ "\u0020", "\u00A0", "\u1680", "\u180E", "\u2000",
                  "\u2001", "\u2002", "\u2003", "\u2004", "\u2005",
                  "\u2006", "\u2007", "\u2008", "\u2009", "\u200A",
                  "\u200B", "\u202F", "\u205F", "\u3000", "\uFEFF",
                  "\n", "\u000b", "\u000c", "\r", "\u0085",
                  "\u2028", "\u2029"])+>
| <TAGEND_ASSIGN: "</#assign>">
| <TAGEND_ATTEMPT: "</#attempt>">
| <TAGEND_CASE: "</#case>">
| <TAGEND_COMPRESS: "</#compress>">
| <TAGEND_ESCAPE: "</#escape>">
| <TAGEND_FALLBACK: "</#fallback>">
| <TAGEND_FUNCTION: "</#function>">
| <TAGEND_FLUSH: "</#flush>">
| <TAGEND_FTL: "</#ftl>">
| <TAGEND_GLOBAL: "</#global>">
| <TAGEND_IF: "</#if>">
| <TAGEND_INCLUDE: "</#include>">
| <TAGEND_ITEMS: "</#items>">
| <TAGEND_LIST: "</#list>">
| <TAGEND_LOCAL: "</#local>">
//| <TAGEND_LT: "</#lt>">
| <TAGEND_MACRO: "</#macro>">
| <TAGEND_NESTED: "</#nested>">
| <TAGEND_NOESCAPE: "</#noescape>">
//| <TAGEND_NT: "</#nt>">
| <TAGEND_RECURSE: "</#recurse>">
| <TAGEND_RETURN: "</#return>">
| <TAGEND_SEP: "</#sep>">
| <TAGEND_SETTING: "</#setting>">
| <TAGEND_STOP: "</#stop>">
| <TAGEND_SWITCH: "</#switch>">
//| <TAGEND_RT: "</#rt>">
//| <TAGEND_T: "</#t>">
| <TAGEND_VISIT: "</#visit>">
| <TAGEND_ILLEGAL: ("</#" ~[ "\u0020", "\u00A0", "\u1680", "\u180E", "\u2000",
                  "\u2006", "\u2007", "\u2008", "\u2009", "\u200A",
                  "\u200B", "\u202F", "\u205F", "\u3000", "\uFEFF",
                  "\n", "\u000b", "\u000c", "\r", "\u0085",
                  "\u2028", "\u2029"])+>
| <MACROCALL_START: "<@" > { pushState(EXPRESSION); }
| <MACROCALL_END: "</@" > { pushState(EXPRESSION); }
| <NEWLINE: "\n">
| <CONTENT: (~[ "$", "<", "\n" ])+ | ~[ "\n" ]>
}


<CEXPRESSION,EXPRESSION> SKIP : {
  <([ "\u0020", "\u00A0", "\u1680", "\u180E", "\u2000",
    "\u2001", "\u2002", "\u2003", "\u2004", "\u2005",
    "\u2006", "\u2007", "\u2008", "\u2009", "\u200A",
    "\u200B", "\u202F", "\u205F", "\u3000", "\uFEFF",
    "\u000b", "\u000c", "\r", "\u0085",
    "\u2028", "\u2029" ])+>
}

<CEXPRESSION,EXPRESSION> TOKEN :
{
  <CURLY_CLOSE: "}"> { popState(); }
| <CURLY_OPEN: "{"> { dupState(); }
| <EMPTY_TAG_END: "/>"> { popState(); }
| <NUMBERLITERAL: (["0"-"9"])+("."(["0"-"9"])+)?>
| <BOOLEAN_TRUE: "true">
| <BOOLEAN_FALSE: "false">
| <CMP_EQUALS: "==">
| <CMP_NOTEQUALS: "!=">
| <GTE: "gte"|"\\gte"|"&gt;=">
| <LTE: "&lt;="|"\\lte "|"lte "|"<=">
| <LT: "&lt;"|"\\lt"|"lt"|"<">
| <GT: "gt"|"\\gt"|"&gt;">
| <DOUBLE_QUEST: "??">
| <LOG_AND: "&&">
| <LOG_OR: "||">
| <ELIPSE_DOTS: "...">
| <RANGE_DOTS: "..">
| <SQUARE_OPEN: "[">
| <SQUARE_CLOSE: "]">
| <COMMA: ",">
| <EXCLAMATION: "!">
| <COLON: ":">
| <SEMICOLON: ";">
| <DOT: ".">
| <ASTERISK: "*">
| <PLUS: "+">
| <MINUS: "-">
| <DIVIDE: "/">
| <MODULO: "%">
| <EQUALS: "=">
| <BRACET_OPEN: "("> { pushState(CEXPRESSION); }
| <BRACET_CLOSE: ")"> { popState(); }
| <QUESTIONMARK: "?">
| <EXNEWLINE: "\n">
// TODO THESE THINGS ARE NOT KEYWORDS AT MOST PLALCES
 // JUST IN LIST AND STUFF. MAYBE I NEED TO MAKE THE PARSER BETTER ????
//| <KEY_TO: "to">
//| <KEY_AS: "as">
|  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

<EXPRESSION,CEXPRESSION> SKIP: {
  "r\"" { pushState(RAW_STRING); }
| "\"" { pushState(DOUBLE_STRING); }
| "'"  { pushState(SINGLE_STRING); }
}

<EXPRESSION> TOKEN : {
  <TAG_END: ">"> { popState(); }
}

<CEXPRESSION> TOKEN : {
  <CGT: ">"> { matchedToken.kind = GT; }
}


<NOPARSE> TOKEN : {
  <TAGEND_NOPARSE: "</#noparse>" > : DEFAULT
| <NOPARSE_CONTENT: (~[ "<" ])+ | ~[]>
}

<COMMENT> TOKEN : {
  <COMMENT_END: "-->" > : DEFAULT
| <COMMENT_CONTENT: (~["-"])+ | ~[]>
}

<RAW_STRING> TOKEN: {
  <RAWSTRINGLITERAL: (~["\""])+>
}

<RAW_STRING> SKIP: {
  "\"" { popState(); }
}


<DOUBLE_STRING> TOKEN: {
  <STRINGLITERAL:    ("\\"~[] | ~["\""])+>
}

<DOUBLE_STRING> SKIP: {
  "\"" { popState(); }
}

<SINGLE_STRING> TOKEN: {
  <S_STR_CONTENT: ("\\"~[] | ~["'"])+> { matchedToken.kind = STRINGLITERAL; }
}

<SINGLE_STRING> SKIP: {
  "'" { popState(); }
}

TOKEN: {
  <ILLEGAL_IMPUT: ~[]>
}


Node start(ParseState state) :
{ Node result; }
{
  result = sequence(state) <EOF> { return result; }
}

Node sequence(ParseState state) :
{
  SequenceNodeBuilder builder = builderFactory.sequenceNode(state);
  Node node;
  Token token;
}
{
  (
   ( node=directive(state)
    |node=content(state)
    |node=inlineexpression(state)
   ) { builder.add(node); })*
  { return builder.build(); }
}

Node directive(ParseState state) :
{ Node result; }
{
  (  (<TAG_NOPARSE> result=noparse(state))
   | (<TAG_COMMENT> result=comment(state))
   | (<TAG_ASSIGN> result=assign(state))
   | (<TAG_ATTEMPT> result=attempt(state))
   | (<TAG_COMPRESS> result=compress(state))
   | (<TAG_ESCAPE> result=escape(state))
   | (<TAG_FUNCTION> result=function(state))
   | (<TAG_GLOBAL> result=global(state))
   | (<TAG_IF> result=ifNode(state))
   | (<TAG_IMPORT> result=importNode(state))
   | (<TAG_INCLUDE> result=include(state))
   | (<TAG_LIST> result=list(state))
  ){ return result; }
}

//////////////////////
// DIRECTIVES       //
//////////////////////

Node comment(ParseState state) :
{
  CommentNodeBuilder builder = builderFactory.commentNode(state);
  Token token;
}
{
  (token = <COMMENT_CONTENT> { builder.add(token.image); })+ <COMMENT_END>
  { return builder.build(); }
}

Node content(ParseState state) :
{
  ContentNodeBuilder builder = builderFactory.contentNode(state);
  Token token;
}
{
  ((token = <CONTENT>)
  |(token = <NEWLINE>))
  { builder.add(token); return builder.build(); }
}


Node noparse(ParseState state) :
{
  NoparseNodeBuilder builder = builderFactory.noparseNode(state);
  Token token;
}
{
  (token = <NOPARSE_CONTENT> { builder.content(token); })* <TAGEND_NOPARSE>
  { return builder.build(); }
}

Node attempt(ParseState state) :
{
  AttemptNodeBuilder builder = builderFactory.attemptNode(state);
  Node node;
}
{
  <TAG_END>
    node=sequence(state) { builder.attempt(node); }
  <TAG_RECOVER> <TAG_END>
    node=sequence(state) { builder.recover(node); }
  <TAGEND_ATTEMPT>
  { return builder.build(); }
}

Node assign(ParseState state) :
{
  AssignNodeBuilder builder = builderFactory.assignNode(state);
  String variableName;
  Expression valueExpresion;
  Node valueNode;
  builder.scope("default");
}
{
  variableName = variableName(state) { builder.name(variableName); }
  ( (<EQUALS> valueExpresion=expression(state) (<TAG_END> | <EMPTY_TAG_END>){ builder.value(valueExpresion); })
   |(<TAG_END> valueNode=sequence(state) <TAGEND_ASSIGN>{ builder.value(valueNode); })
  )
  {
    return builder.build();
  }
}

Node compress(ParseState state) :
{
  CompressNodeBuilder builder = builderFactory.compressNode(state);
  Node content;
}
{
  <TAG_END> content = sequence(state) <TAGEND_COMPRESS>
  {
    builder.content(content);
    return builder.build();
  }
}


Node escape(ParseState state) :
{
  EscapeNodeBuilder builder = builderFactory.escapeNode(state);
  String name;
  Token keyword;
  Expression expression;
  Node content;
}
{
  name = variableName(state) { builder.name(name); }
  keyword = <IDENTIFIER> { builder.keyword(keyword); }
  expression = expression(state) <TAG_END> { builder.expression(expression); }
  content = sequence(state) { builder.content(content); }
  <TAGEND_ESCAPE>
  { return builder.build(); }
}

Node function(ParseState state) :
{
 FunctionNodeBuilder builder = builderFactory.functionNode(state);
 String name;
 Expression defVal;
 Node body;
}
{
  name = variableName(state) { builder.name(name); }
  (
    (name=variableName(state) { builder.param(name); })+
    ( <EQUALS> defVal=expression(state) { builder.def(defVal); }
     (name=variableName(state) <EQUALS> defVal=expression(state)
     { builder.param(name); builder.def(defVal); })*
    )?
  )?
  <TAG_END>
  body=sequence(state) { builder.body(body); }
  <TAGEND_FUNCTION>
  { return builder.build(); }
}

Node global(ParseState state) :
{
  AssignNodeBuilder builder = builderFactory.globalNode(state);
  String variableName;
  Expression valueExpresion;
  Node valueNode;
  builder.scope("global");
}
{
  variableName = variableName(state) { builder.name(variableName); }
  ( (<EQUALS> valueExpresion=expression(state) (<TAG_END> | <EMPTY_TAG_END>){ builder.value(valueExpresion); })
   |(<TAG_END> valueNode=sequence(state) <TAGEND_ASSIGN>{ builder.value(valueNode); })
  )
  {
    return builder.build();
  }
}


Node ifNode(ParseState state) :
{
  IfNodeBuilder builder = builderFactory.ifNode(state);
  Expression condition;
  Node content;
}
{
  (condition=expression(state) <TAG_END>
   content=sequence(state) { builder.add(condition,content); })
  (<TAG_ELSEIF> condition=expression(state) <TAG_END>
    content=sequence(state) { builder.add(condition,content); })*
  (<TAG_ELSE> <TAG_END> content=sequence(state) { builder.add(null, content); })?
  <TAGEND_IF>
  { return builder.build(); }
}

Node importNode(ParseState state) :
{
  ImportNodeBuilder builder = builderFactory.importNode(state);
  Expression path;
  Token keyword;
  String name;
}
{
  path=expression(state) { builder.path(path); }
  keyword=<IDENTIFIER> { builder.keyword(keyword); }
  name=variableName(state) { builder.name(name); }
  (<TAG_END> | <EMPTY_TAG_END>)
  { return builder.build(); }
}

Node include(ParseState state) :
{
  IncludeNodeBuilder builder = builderFactory.includeNode(state);
  Expression path;
  Token oname;
  Expression ovalue;
}
{
  path=expression(state) { builder.path(path); }
  (oname=<IDENTIFIER> <EQUALS> ovalue=expression(state)
  { builder.option(oname, ovalue); })*
  (<TAG_END> | <EMPTY_TAG_END>)
  { return builder.build(); }
}

Node list(ParseState state) :
{
  ListNodeBuilder builder = builderFactory.listNode(state);
  Expression expression;
  Node result;
}
{
  expression=expression(state) { builder.expression(expression); }
 (
   (<TAG_END> result=listType2(builder, state))
  | result=listType1(builder, state))
  { return result; }
}

Node listType1(ListNodeBuilder builder, ParseState state) :
{}
{
  <IDENTIFIER> variableName(state)
   (<COMMA> variableName(state))?<TAG_END>
  sequence(state)
  (<TAG_SEP> <TAG_END>
  sequence(state)
  (<TAGEND_SEP> sequence(state))?)?
  (<TAG_ELSE> <TAG_END> sequence(state))?
  <TAGEND_LIST>
  { return builder.build(); }
}

Node listType2(ListNodeBuilder builder, ParseState state) :
{}
{
  sequence(state)
  <TAG_ITEMS> <IDENTIFIER> variableName(state)
   (<COMMA> variableName(state))?<TAG_END>
  sequence(state)
  (<TAG_SEP> <TAG_END>
  sequence(state)
  (<TAGEND_SEP> sequence(state))?)?
  <TAGEND_ITEMS>
  sequence(state)
  (<TAG_ELSE> <TAG_END> sequence(state))?
  <TAGEND_LIST>
  { return builder.build(); }
}

//////////////////////
// EXPRESSIONS      //
//////////////////////

String variableName(ParseState state) :
{
  Token token;
}
{
  token=<IDENTIFIER>
  { return token.image; }
}

Node inlineexpression(ParseState state) :
{
  InterpolationNodeBuilder builder = builderFactory.interpolationNode(state);
  Expression ex;
}
{
  <EXPRESSION_START> ex = expression(state) <CURLY_CLOSE>
  {
    builder.expression(ex);
    return builder.build();
  }
}

Expression expression(ParseState state) :
{
  Token identifier;
}
{
  identifier = <IDENTIFIER> { return new IdentifierExpression(identifier.image); }
}
